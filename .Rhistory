# remove the disease samples from this first analysis
counts2$AMR1D <- NULL
counts2$AMR2D <- NULL
counts2$AMR3D <- NULL
counts2$AMR5D <- NULL
counts2$AMR7D <- NULL
counts2$AMR8D <- NULL
counts2$AMR9D <- NULL
counts3 <-counts2[rowSums(counts2[])>0,]
counts4 <- counts3
counts4$row_names <- row.names(counts4)
colnames(counts4)[14] <- 'transcript_id'
rgi <- read.table("rgi_out.txt",sep="\t",header=TRUE,quote="")
rgi_counts <-merge(rgi,counts4,by="transcript_id")
write.table(rgi_counts,"Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",col.names=NA)
meta <-read.table("metadata.txt",sep="\t",header=TRUE)
# remove disease samples to compare just before and after antibiotic treatment
meta2 <-meta[meta$type != "disease",]
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=counts2,
colData=meta2,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_results.txt")
print(res)
sink()
View(res)
library(dplyr)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
View(rgi_counts)
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize(value=sum(value))
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize(across(where(is.numberic), sum))
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize(across(where(is.numberic), sum)) %>% select(rgi_counts, 6-18)
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize(across(where(is.numeric), sum)) %>% select(rgi_counts, 6-18)
View(rgi_counts)
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize(across(where(is.numeric), sum)) %>% select(6:18)
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize(across(where(is.numeric), sum)) %>% select(AMR1A:AMR10A)
View(amrfam)
View(amrfam)
View(rgi_counts)
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% mutate(Best_Hit_ARO = Best_Hit_ARO, Drug.Class = Drug.Class, Resistance.Mechanism = Resistance.Mechanism) %>% summarize(across(where(is.numeric), sum)) %>% select(AMR1A:AMR10A) %>% ungroup()
View(amrfam)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
View(amrfam)
View(rgi_counts)
#combine individual gene counts to get counts by Drug.Class
drug <- rgi_counts %>% group_by(Drug.Class) %>% summarize_at(vars(AMR1A:AMR10A), sum)
View(drug)
#combine individual gene counts to get counts by Resistance.Mechanism
mech <- rgi_counts %>% group_by(Resistance.Mechanism) %>% summarize_at(vars(AMR1A:AMR10A), sum)
View(mech)
counts <- read.table("20-samples-Bact-cds-counts.txt",sep="\t",header=TRUE)
# DeSeq is looking for only counts, without a first column of gene names, make the gene names row names.
mat <- counts[,-1]
rownames(mat) <- counts[,1]
# The Salmon counts have decimal places - round them up to prevent issues in deseq
counts2<-round(mat,digits=0)
# remove the disease samples from this analysis
counts2$AMR1D <- NULL
counts2$AMR2D <- NULL
counts2$AMR3D <- NULL
counts2$AMR5D <- NULL
counts2$AMR7D <- NULL
counts2$AMR8D <- NULL
counts2$AMR9D <- NULL
counts3 <-counts2[rowSums(counts2[])>0,]
counts4 <- counts3
counts4$row_names <- row.names(counts4)
View(counts3)
#format for DeSeq2
amrfam2 <- amrfam[rowSums(amrfam[])>0,]
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DeSeq2
amrfam2 <- amrfam[rowSums(amrfam[])>0,]
View(counts2)
counts <- read.table("20-samples-Bact-cds-counts.txt",sep="\t",header=TRUE)
# DeSeq is looking for only counts, without a first column of gene names, make the gene names row names.
mat <- counts[,-1]
rownames(mat) <- counts[,1]
# The Salmon counts have decimal places - round them up to prevent issues in deseq
counts2<-round(mat,digits=0)
# remove the disease samples from this analysis
counts2$AMR1D <- NULL
counts2$AMR2D <- NULL
counts2$AMR3D <- NULL
counts2$AMR5D <- NULL
counts2$AMR7D <- NULL
counts2$AMR8D <- NULL
counts2$AMR9D <- NULL
counts3 <-counts2[rowSums(counts2[])>0,] # remove empty rows
counts4 <- counts3
counts4$row_names <- row.names(counts4) # format for DESeq2
colnames(counts4)[14] <- 'transcript_id'
rgi <- read.table("rgi_out.txt",sep="\t",header=TRUE,quote="")
rgi_counts <-merge(rgi,counts4,by="transcript_id")
write.table(rgi_counts,"Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",col.names=NA)
meta <-read.table("metadata.txt",sep="\t",header=TRUE)
# remove disease samples to compare just before and after antibiotic treatment
meta2 <-meta[meta$type != "disease",]
write.table(meta2,"metadata_13.txt",sep="\t",col.names=NA)
View(counts3)
View(counts4)
View(counts2)
View(counts)
View(counts2)
View(counts4)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
View(rgi_counts)
rgi_counts[1] <- NULL
View(rgi_counts)
library(dplyr)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
#combine individual gene counts to get counts by Drug.Class
drug <- rgi_counts %>% group_by(Drug.Class) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#combine individual gene counts to get counts by Resistance.Mechanism
mech <- rgi_counts %>% group_by(Resistance.Mechanism) %>% summarize_at(vars(AMR1A:AMR10A), sum)
View(amrfam)
amrfam2 <- amrfam
rownames(amrfam2) <- counts[,1]
View(amrfam2)
#format for DESeq2
amrfam2 <- as.data.frame(amrfam)
rownames(amrfam2) <- counts[,1]
rownames(amrfam2) <- amrfam2[,1]
View(amrfam2)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
amrfam2 <- as.data.frame(amrfam)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
amrfam2 <- amrfam
rownames(amrfam2) <- amrfam2[,1]
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
amrfam2 <- as.data.frame(amrfam)
rownames(amrfam2) <- amrfam2[,1]
amrfam2 <- as.data.frame(amrfam)
rownames(amrfam2) <- amrfam2[,1]
amrfam2$AMR.Gene.Family <- NULL
View(amrfam2)
drug <- rgi_counts %>% group_by(Drug.Class) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
drug2 <- as.data.frame(drug)
rownames(drug2) <- drug2[,1]
drug2$Drug.Class <- NULL
# use drug2 as input for DESeq2
View(drug)
View(drug2)
mech <- rgi_counts %>% group_by(Resistance.Mechanism) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
mech2 <- as.data.frame(mech)
rownames(mech2) <- mech2[,1]
mech2$Resistance.Mechanism <- NULL
# use mech2 as input for DESeq2
View(mech2)
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
dds <- DESeqDataSetFromMatrix(countData=amrfam2,
colData=meta2,
design=~type)
dds <- DESeqDataSetFromMatrix(countData=amrfam2,
colData=meta,
design=~type)
#see what the object looks like
dds
View(amrfam2)
View(meta)
meta$X <- NULL
library(dplyr)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
amrfam2 <- as.data.frame(amrfam)
rownames(amrfam2) <- amrfam2[,1]
amrfam2$AMR.Gene.Family <- NULL
# use amrfam2 as input for DESeq2
#combine individual gene counts to get counts by Drug.Class
drug <- rgi_counts %>% group_by(Drug.Class) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
drug2 <- as.data.frame(drug)
rownames(drug2) <- drug2[,1]
drug2$Drug.Class <- NULL
# use drug2 as input for DESeq2
#combine individual gene counts to get counts by Resistance.Mechanism
mech <- rgi_counts %>% group_by(Resistance.Mechanism) %>% summarize_at(vars(AMR1A:AMR10A), sum)
#format for DESeq2
mech2 <- as.data.frame(mech)
rownames(mech2) <- mech2[,1]
mech2$Resistance.Mechanism <- NULL
# use mech2 as input for DESeq2
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing all individual RGI genes
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=counts3,
colData=meta,
design=~type)
View(meta)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=amrfam2,
colData=meta,
design=~type)
#see what the object looks like
dds
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta2 <- as.data.frame(meta)
rownames(meta2) <- meta2[,1]
meta2$sample <- NULL
View(meta2)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=amrfam2,
colData=meta2,
design=~type)
#see what the object looks like
dds
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=amrfam2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_results_AMRgenefamily.txt")
print(res)
sink()
sink("DESeq2_summary_AMRgenefamily.txt")
print(res)
sink()
sink("DESeq2_summary_AMRgenefamily.txt")
print(summary(res))
sink()
View(rgi_counts)
counts <- read.table("20-samples-Bact-cds-counts.txt",sep="\t",header=TRUE)
# DeSeq is looking for only counts, without a first column of gene names, make the gene names row names.
mat <- counts[,-1]
rownames(mat) <- counts[,1]
# The Salmon counts have decimal places - round them up to prevent issues in deseq
counts2<-round(mat,digits=0)
# remove the disease samples from this analysis
counts2$AMR1D <- NULL
counts2$AMR2D <- NULL
counts2$AMR3D <- NULL
counts2$AMR5D <- NULL
counts2$AMR7D <- NULL
counts2$AMR8D <- NULL
counts2$AMR9D <- NULL
counts3 <-counts2[rowSums(counts2[])>0,] # remove empty rows
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing all individual RGI genes
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=counts3,
colData=meta,
design=~type)
#see what the object looks like
dds
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_summary_transcriptid.txt")
print(summary(res))
sink()
sink("DESeq2_results_transcriptid.txt")
print(res)
sink()
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=drug2,
colData=meta,
design=~type)
#see what the object looks like
dds
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_results_DrugClass.txt")
print(res)
sink()
sink("DESeq2_summary_DrugClass.txt")
print(summary(res))
sink()
dds <- DESeqDataSetFromMatrix(countData=mech2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_results_ResistanceMechanism.txt")
print(res)
sink()
sink("DESeq2_summary_ResistanceMechanism.txt")
print(summary(res))
sink()
View(drug)
View(drug2)
write.table(amrfam,"Untreated-vs-antibiotic_AMRgenefamily-counts.txt",sep="\t",col.names=NA)
write.table(drug,"Untreated-vs-antibiotic_DrugClass-counts.txt",sep="\t",col.names=NA)
write.table(mech,"Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",col.names=NA)
library(ggplot2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
View(mech)
View(meta)
meta$X <- NULL
mech$X <- NULL
View(mech)
View(meta)
p <- plot_bar(mech,fill="Resistance.Mechanism")
library(ggplot2)
p <- plot_bar(mech,fill="Resistance.Mechanism")
p <- ggplot(mech,fill="Resistance.Mechanism")+geom_bar(aes(fill=Resistance.Mechanims), stat="identity", position="stack")
p
p <- ggplot(mech,fill="Resistance.Mechanism")+geom_bar(aes(fill=Resistance.Mechanism), stat="identity", position="stack")
p
#merge metadata and count dataframes - start by converting mech from wide to long format
library(tidyr)
install.packages("tidyr")
#merge metadata and count dataframes - start by converting mech from wide to long format
library(tidyr)
mech_long <- gather(mech, key="Resistance.Mechanism")
View(mech_long)
#merge metadata and count dataframes - start by converting mech from wide to long format
library(reshape2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
mech_long <- melt(mech, id.vars=c("Resistance.Mechanism"))
View(mech_long)
View(meta)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
mech_long <- melt(mech, id.vars=c("Resistance.Mechanism"), v.names="sample")
View(mech_long)
mech_long <- melt(mech, id.vars=c("Resistance.Mechanism"), idvar="sample")
View(mech)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#merge metadata and count dataframes - start by converting mech from wide to long format
library(reshape2)
mech_long <- melt(mech, id.vars=c("Resistance.Mechanism"), measure.vars="sample")
mech_long <- melt(mech, id.vars=c("Resistance.Mechanism"))
View(mech_long)
colnames(mech_long)[colnames(mech_long) == "variable"] <- "sample"
View(mech_long)
View(mech_long)
colnames(mech_long)[colnames(mech_long) == "value"] <- "count"
resist <-merge(meta, mech_long, "sample")
View(resist)
p <- ggplot(mech,aes(x="sample", fill="Resistance.Mechanism"))+geom_bar(aes(position="stack", stat="identity"))
p
p <- ggplot(mech,aes(x="sample", fill="Resistance.Mechanism"))+geom_bar(position="stack", stat="identity")
p
ggplot(mech,aes(x="sample", y="count", fill="Resistance.Mechanism"))+geom_bar(position="stack", stat="identity")
ggplot(resist,aes(x="sample", y="count", fill="Resistance.Mechanism"))+geom_bar(position="stack", stat="identity")
View(mech)
#calculate relative abundance from counts
mech_RA[,-1] <- mech[,-1]/colSums(mech[,-1]) * 100
#calculate relative abundance from counts
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
View(mech_RA)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
mech_RA <- mech
first_column <- mech$Resistance.Mechanism
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- first_column
View(meta)
first_column <- mech_RA$Resistance.Mechanism
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- first_column
View(meta)
View(mech)
View(mech_RA)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
mech_RA <- mech
first_column <- mech_RA$Resistance.Mechanism
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA2 <- merge(first_column,mech_RA)
View(mech_RA2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
first_column <- mech$Resistance.Mechanism
View(mech)
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
View(mech_RA)
mech_RA$Resistance.Mechanism <- first_column
View(meta)
mech_RA$Resistance.Mechanism <- mech$Resistance.Mechanism
View(mech_RA)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- mech$Resistance.Mechanism
View(mech_RA)
mech_long <- melt(mech, id.vars=c("Resistance.Mechanism"))
View(mech_long)
mech_long <- melt(mech_RA, id.vars=c("Resistance.Mechanism"))
eta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- mech$Resistance.Mechanism
#merge metadata and count dataframes - start by converting mech from wide to long format
library(reshape2)
mech_long <- melt(mech_RA, id.vars=c("Resistance.Mechanism"))
colnames(mech_long)[colnames(mech_long) == "variable"] <- "sample"
colnames(mech_long)[colnames(mech_long) == "value"] <- "count"
resist <-merge(meta, mech_long, "sample")
View(resist)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- mech$Resistance.Mechanism
#merge metadata and count dataframes - start by converting mech from wide to long format
library(reshape2)
mech_long <- melt(mech_RA, id.vars=c("Resistance.Mechanism"))
colnames(mech_long)[colnames(mech_long) == "variable"] <- "sample"
colnames(mech_long)[colnames(mech_long) == "value"] <- "proportion"
resist <-merge(meta, mech_long, "sample")
View(resist)
ggplot(resist,aes(x="sample", y="proportion", fill="Resistance.Mechanism"))+geom_bar(position="stack", stat="identity")
ggplot(resist,aes(x="sample", fill="Resistance.Mechanism"))+geom_bar(position="stack", stat="identity")
ggplot(resist,aes(x="sample", y="proportion", fill="Resistance.Mechanism"))+geom_bar(position="stack", stat="identity")
ggplot(resist,aes(x="sample", y="proportion"))+geom_bar(position="stack", stat="identity", fill="Resistance.Mechanism")
ggplot(resist,aes(x="sample", y="proportion"))+geom_bar(position="stack", stat="identity")
#plot as stacked bars
ggplot(resist, aes(fill=Resistance.Mechanism, x=sample, y=proportion)) +geom_bar(position="stack",stat="identity")
#calculate relative abundance from counts
mech_RA2 <- mech[-1,]/colSums(mech[-1,]) * 100
#plot as stacked bars
ggplot(resist, aes(fill=Resistance.Mechanism, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")
#plot as stacked bars
ggplot(resist, aes(fill=Resistance.Mechanism, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type)
#plot as stacked bars
ggplot(resist, aes(fill=Resistance.Mechanism, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free")
#plot as stacked bars
ggplot(resist, aes(fill=Resistance.Mechanism, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free")
