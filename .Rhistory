# The Salmon counts have decimal places - round them up to prevent issues in deseq
counts2<-round(mat,digits=0)
# remove the disease samples from this analysis
counts2$AMR1D <- NULL
counts2$AMR2D <- NULL
counts2$AMR3D <- NULL
counts2$AMR5D <- NULL
counts2$AMR7D <- NULL
counts2$AMR8D <- NULL
counts2$AMR9D <- NULL
counts3 <-counts2[rowSums(counts2[])>0,] # remove empty rows
# use counts3 as input for DESeq2
counts4 <- counts3
counts4$row_names <- row.names(counts4) # add back transcript.id as a column to merge with metadata
colnames(counts4)[14] <- 'transcript_id'
rgi <- read.table("rgi_out.txt",sep="\t",header=TRUE,quote="")
rgi_counts <-merge(rgi,counts4,by="transcript_id")
write.table(rgi_counts,"Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",col.names=NA)
meta <-read.table("metadata.txt",sep="\t",header=TRUE)
# remove disease samples to compare just before and after antibiotic treatment
meta2 <-meta[meta$type != "disease",]
write.table(meta2,"metadata_13.txt",sep="\t",col.names=NA)
library(dplyr)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(amrfam,"Untreated-vs-antibiotic_AMRgenefamily-counts.txt",sep="\t",col.names=NA)
#format for DESeq2
amrfam2 <- as.data.frame(amrfam)
rownames(amrfam2) <- amrfam2[,1]
amrfam2$AMR.Gene.Family <- NULL
# use amrfam2 as input for DESeq2
#combine individual gene counts to get counts by Drug.Class
drug <- rgi_counts %>% group_by(Drug.Class) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(drug,"Untreated-vs-antibiotic_DrugClass-counts.txt",sep="\t",col.names=NA)
#format for DESeq2
drug2 <- as.data.frame(drug)
rownames(drug2) <- drug2[,1]
drug2$Drug.Class <- NULL
# use drug2 as input for DESeq2
#combine individual gene counts to get counts by Resistance.Mechanism
mech <- rgi_counts %>% group_by(Resistance.Mechanism) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(mech,"Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",col.names=NA)
#format for DESeq2
mech2 <- as.data.frame(mech)
rownames(mech2) <- mech2[,1]
mech2$Resistance.Mechanism <- NULL
# use mech2 as input for DESeq2
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing all individual RGI genes
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=counts3,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_summary_transcriptid.txt")
print(summary(res))
sink()
sink("DESeq2_results_transcriptid.txt")
print(res)
sink()
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=amrfam2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_results_AMRgenefamily.txt")
print(res)
sink()
sink("DESeq2_summary_AMRgenefamily.txt")
print(summary(res))
sink()
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=drug2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_results_DrugClass.txt")
print(res)
sink()
sink("DESeq2_summary_DrugClass.txt")
print(summary(res))
sink()
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=mech2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_untreated_vs_antibiotic")
summary(res)
sink("DESeq2_results_ResistanceMechanism.txt")
print(res)
sink()
sink("DESeq2_summary_ResistanceMechanism.txt")
print(summary(res))
sink()
library(ggplot2)
library(reshape2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- mech$Resistance.Mechanism
#merge metadata and count dataframes - start by converting mech from wide to long format
mech_long <- melt(mech_RA, id.vars=c("Resistance.Mechanism"))
colnames(mech_long)[colnames(mech_long) == "variable"] <- "sample"
colnames(mech_long)[colnames(mech_long) == "value"] <- "proportion"
resist <-merge(meta, mech_long, "sample")
#plot as stacked bars
ggplot(resist, aes(fill=Resistance.Mechanism, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free")
# to do: black and white theme, better fill colors, 90 degree shift of x-axis labels
# reduce hybrid categories to "other"
library(dplyr)
library(ggplot2)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#subset = just "antibiotic inactivation" which includes beta-lactamases
inact <- rgi_counts[which(rgi_counts$Resistance.Mechanism=='antibiotic inactivation'),]
inact2 <- inact %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(inact2,"Untreated-vs-antibiotic_AntibioticInactivation-counts.txt",sep="\t",col.names=NA)
inact2_RA <- inact2[,-1]/colSums(inact2[,-1]) * 100
inact2_RA$AMR.Gene.Family <- inact2$AMR.Gene.Family
View(inact2_RA)
View(inact2_RA)
inact2_RA %/% relocate(AMR.Gene.Family)
str(inact2_RA)
colnames(inact2_RA)
inact2_RA %/% relocate("AMR.Gene.Family")
inact3 = inact2_RA[, c("AMR.Gene.Family", names(inact2_RA)[names(inact2_RA) != "AMR.Gene.Family"])]
View(inact3)
rownames(inact3) <- inact3[,1]
rownames(inact3) <- inact3[,1]
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#subset = just "antibiotic inactivation" which includes beta-lactamases
inact <- rgi_counts[which(rgi_counts$Resistance.Mechanism=='antibiotic inactivation'),]
inact2 <- inact %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(inact2,"Untreated-vs-antibiotic_AntibioticInactivation-counts.txt",sep="\t",col.names=NA)
#calculate relative abundance from counts
inact2_RA <- inact2[,-1]/colSums(inact2[,-1]) * 100
inact2_RA$AMR.Gene.Family <- inact2$AMR.Gene.Family
inact3 = inact2_RA[, c("AMR.Gene.Family", names(inact2_RA)[names(inact2_RA) != "AMR.Gene.Family"])]
write.table(inact2_RA,"Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",col.names=NA)
write.table(inact3,"Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",col.names=NA)
View(inact3)
inact3$total <- rowSums(inact3)
inact3$total <- rowSums(inact3[,2:14])
inact4 <- inact3[order(inact3$total),]
View(inact4)
inact4 <- inact3[order(inact3$total, decreasing = TRUE),]
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#subset = just "antibiotic inactivation" which includes beta-lactamases
inact <- rgi_counts[which(rgi_counts$Resistance.Mechanism=='antibiotic inactivation'),]
inact2 <- inact %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
w
inact2_RA <- inact2[,-1]/colSums(inact2[,-1]) * 100
inact2_RA$AMR.Gene.Family <- inact2$AMR.Gene.Family
inact3 = inact2_RA[, c("AMR.Gene.Family", names(inact2_RA)[names(inact2_RA) != "AMR.Gene.Family"])]
inact3$total <- rowSums(inact3[,2:14])
inact4 <- inact3[order(inact3$total, decreasing = TRUE),]
View(inact4)
top25 <-head(inact4, 25)
View(top25)
#merge metadata and count dataframes - start by converting mech from wide to long format
top25_long <- melt(top25, id.vars=c("AMR.Gene.Family"))
View(top25_long)
colnames(top25_long)[colnames(top25_long) == "variable"] <- "sample"
colnames(top25_long)[colnames(top25_long) == "value"] <- "proportion"
inact5 <-merge(top25_long, "sample")
View(inact5)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#subset = just "antibiotic inactivation" which includes beta-lactamases
inact <- rgi_counts[which(rgi_counts$Resistance.Mechanism=='antibiotic inactivation'),]
inact2 <- inact %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(inact2,"Untreated-vs-antibiotic_AntibioticInactivation-counts.txt",sep="\t",col.names=NA)
#calculate relative abundance from counts
inact2_RA <- inact2[,-1]/colSums(inact2[,-1]) * 100
inact2_RA$AMR.Gene.Family <- inact2$AMR.Gene.Family
inact3 = inact2_RA[, c("AMR.Gene.Family", names(inact2_RA)[names(inact2_RA) != "AMR.Gene.Family"])]
write.table(inact3,"Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",col.names=NA)
#create a sum column to find most abundant inactivation gene families then sort by abundance before plotting
inact3$total <- rowSums(inact3[,2:14])
inact4 <- inact3[order(inact3$total, decreasing = TRUE),]
top25 <-head(inact4, 25)
#merge metadata and count dataframes - start by converting mech from wide to long format
top25_long <- melt(top25, id.vars=c("AMR.Gene.Family"))
View(top25_long)
colnames(top25_long)[colnames(top25_long) == "variable"] <- "sample"
colnames(top25_long)[colnames(top25_long) == "value"] <- "proportion"
inact5 <-merge(meta, top25_long, "sample")
View(top25_long)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
inact5 <-merge(meta, top25_long, "sample")
View(inact5)
View(meta)
mech$X <- NULL
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
inact5 <-merge(meta, top25_long, "sample")
View(inact5)
View(inact5)
ggplot(inact5, aes(fill=AMR.Gene.Family, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free")
#plot as stacked bars
#pdf("inactivation.pdf", width=11)
ggplot(inact5, aes(fill=AMR.Gene.Family, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free") + theme(legend.position="bottom")
pdf("inactivation.pdf", width=11)
ggplot(inact5, aes(fill=AMR.Gene.Family, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free") + theme(legend.position="bottom")
dev.off()
pdf("inactivation.pdf", height= 11, width=8.5)
ggplot(inact5, aes(fill=AMR.Gene.Family, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free") + theme(legend.position="bottom")
dev.off()
write.table(top25,"Untreated-vs-antibiotic_AntibioticInactivation-RA_top25.txt",sep="\t",col.names=NA)
View(inact5)
ggplot(inact5, aes(fill=AMR.Gene.Family, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free") + theme(legend.position="bottom")
library(dplyr)
library(reshape2)
library(ggplot2)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#subset = just "antibiotic inactivation" which includes beta-lactamases
inact <- rgi_counts[which(rgi_counts$Resistance.Mechanism=='antibiotic inactivation'),]
inact2 <- inact %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(inact2,"Untreated-vs-antibiotic_AntibioticInactivation-counts.txt",sep="\t",col.names=NA)
#calculate relative abundance from counts
inact2_RA <- inact2[,-1]/colSums(inact2[,-1]) * 100
inact2_RA$AMR.Gene.Family <- inact2$AMR.Gene.Family
inact3 = inact2_RA[, c("AMR.Gene.Family", names(inact2_RA)[names(inact2_RA) != "AMR.Gene.Family"])]
write.table(inact3,"Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",col.names=NA)
#find the top10 antibiotic inactivation gene families
inact3$total <- rowSums(inact3[,2:14])
inact3 <- inact3[order(inact3$total, decreasing = TRUE),]
top10 <-head(inact3, 10)
write.table(top10,"Untreated-vs-antibiotic_AntibioticInactivation-RA_top10_inactivation.txt",sep="\t",col.names=NA)
#merge metadata and count dataframes - start by converting mech from wide to long format
top10_long <- melt(top10, id.vars=c("AMR.Gene.Family"))
colnames(top10_long)[colnames(top10_long) == "variable"] <- "sample"
colnames(top10_long)[colnames(top10_long) == "value"] <- "proportion"
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
inact_meta <-merge(meta, top10_long, "sample")
#plot as stacked bars
inact_meta$type <-factor(inact_meta$type, levels=c("before","after"))
inact_meta$AMR.Gene.Family <-factor(inact_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","nitroimidazole reductase","tetracycline inactivation enzyme","chloramphenicol acetyltransferase (CAT)","streptogramin vgb lyase",'ANT(3")',"macrolide phosphotransferase (MPH)","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase"))
#colorblind friendly palette from ggpubfigs: https://github.com/JLSteenwyk/ggpubfigs/blob/master/R/colors.R
#muted_nine = c("#332288", "#117733", "#CC6677", "#88CCEE", "#999933", "#882255", "#44AA99", "#DDCC77", "#AA4499")
mycolors2 <-c("OXA beta-lactamase"="#332288","nitroimidazole reductase"="#117733","tetracycline inactivation enzyme"="#CC6677","chloramphenicol acetyltransferase (CAT)"="#88CCEE","streptogramin vgb lyase"="#999933",'ANT(3")'="#882255","macrolide phosphotransferase (MPH)"="#44AA99","ADC beta-lactamases pending classification for carbapenemase activity"="#DDCC77","CfiA beta-lactamase"="#AA4499","MOX beta-lactamase"="#999999")
#pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
#dev.off()
View(top10)
mycolors2 <-c("OXA beta-lactamase"="#332288","nitroimidazole reductase"="#117733","tetracycline inactivation enzyme"="#CC6677","chloramphenicol acetyltransferase (CAT)"="#88CCEE","streptogramin vgb lyase"="#999933",'ANT(3\")'="#882255","macrolide phosphotransferase (MPH)"="#44AA99","ADC beta-lactamases pending classification for carbapenemase activity"="#DDCC77","CfiA beta-lactamase"="#AA4499","MOX beta-lactamase"="#999999")
inact_meta$AMR.Gene.Family <-factor(inact_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","nitroimidazole reductase","tetracycline inactivation enzyme","chloramphenicol acetyltransferase (CAT)","streptogramin vgb lyase",'ANT(3\")',"macrolide phosphotransferase (MPH)","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase"))
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
View(top10)
top10<- read.table("Untreated-vs-antibiotic_AntibioticInactivation-RA_top10_inactivation.txt",sep="\t",header=TRUE)
#merge metadata and count dataframes - start by converting mech from wide to long format
top10_long <- melt(top10, id.vars=c("AMR.Gene.Family"))
colnames(top10_long)[colnames(top10_long) == "variable"] <- "sample"
colnames(top10_long)[colnames(top10_long) == "value"] <- "proportion"
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
inact_meta <-merge(meta, top10_long, "sample")
#plot as stacked bars
inact_meta$type <-factor(inact_meta$type, levels=c("before","after"))
inact_meta$AMR.Gene.Family <-factor(inact_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","nitroimidazole reductase","tetracycline inactivation enzyme","chloramphenicol acetyltransferase (CAT)","streptogramin vgb lyase","ANT(3)","macrolide phosphotransferase (MPH)","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase"))
#colorblind friendly palette from ggpubfigs: https://github.com/JLSteenwyk/ggpubfigs/blob/master/R/colors.R
#muted_nine = c("#332288", "#117733", "#CC6677", "#88CCEE", "#999933", "#882255", "#44AA99", "#DDCC77", "#AA4499")
mycolors2 <-c("OXA beta-lactamase"="#332288","nitroimidazole reductase"="#117733","tetracycline inactivation enzyme"="#CC6677","chloramphenicol acetyltransferase (CAT)"="#88CCEE","streptogramin vgb lyase"="#999933","ANT(3)"="#882255","macrolide phosphotransferase (MPH)"="#44AA99","ADC beta-lactamases pending classification for carbapenemase activity"="#DDCC77","CfiA beta-lactamase"="#AA4499","MOX beta-lactamase"="#999999")
#pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
dev.off()
top10<- read.table("Untreated-vs-antibiotic_AntibioticInactivation-RA_top10_inactivation.txt",sep="\t",header=TRUE)
#merge metadata and count dataframes - start by converting mech from wide to long format
top10_long <- melt(top10, id.vars=c("AMR.Gene.Family"))
colnames(top10_long)[colnames(top10_long) == "variable"] <- "sample"
colnames(top10_long)[colnames(top10_long) == "value"] <- "proportion"
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
inact_meta <-merge(meta, top10_long, "sample")
#plot as stacked bars
inact_meta$type <-factor(inact_meta$type, levels=c("before","after"))
inact_meta$AMR.Gene.Family <-factor(inact_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","nitroimidazole reductase","tetracycline inactivation enzyme","chloramphenicol acetyltransferase (CAT)","streptogramin vgb lyase","ANT(3)","macrolide phosphotransferase (MPH)","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase","other"))
#colorblind friendly palette from ggpubfigs: https://github.com/JLSteenwyk/ggpubfigs/blob/master/R/colors.R
#muted_nine = c("#332288", "#117733", "#CC6677", "#88CCEE", "#999933", "#882255", "#44AA99", "#DDCC77", "#AA4499")
mycolors2 <-c("OXA beta-lactamase"="#332288","nitroimidazole reductase"="#117733","tetracycline inactivation enzyme"="#CC6677","chloramphenicol acetyltransferase (CAT)"="#88CCEE","streptogramin vgb lyase"="#999933","ANT(3)"="#882255","macrolide phosphotransferase (MPH)"="#44AA99","ADC beta-lactamases pending classification for carbapenemase activity"="#DDCC77","CfiA beta-lactamase"="#AA4499","MOX beta-lactamase"="#999999","other"="#000000")
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
dev.off()
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
dev.off()
pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")
p2
dev.off()
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")+
guides(colour = guide_legend(nrow = 2))
p2
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")+
guides(colour = guide_legend(nrow = 3))
p2
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")+
guides(fill = guide_legend(nrow = 2))
p2
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")+
guides(fill = guide_legend(nrow = 4))
p2
pdf("inactivation_top10.pdf", height=11, width=8.5)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")
p2
dev.off()
pdf("inactivation_top10.pdf")
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")
p2
dev.off()
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")+
guides(fill = guide_legend(nrow = 2))
p2
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
theme(legend.position="bottom")
p2+ guides(fill = guide_legend(nrow = 2))
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
#theme(legend.position="bottom")+
guides(fill = guide_legend(nrow = 2))
p2
pdf("inactivation_top10.pdf")
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
#theme(legend.position="bottom")+
guides(fill = guide_legend(nrow = 2))
p2
dev.off()
pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)+
#theme(legend.position="bottom")+
#guides(fill = guide_legend(nrow = 2))+
theme_bw()
p2
dev.off()
